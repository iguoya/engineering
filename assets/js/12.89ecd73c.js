(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{367:function(t,v,_){"use strict";_.r(v);var r=_(25),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"创建者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建者模式"}},[t._v("#")]),t._v(" 创建者模式")]),t._v(" "),_("blockquote",[_("p",[t._v("创建型模式(Creational Pattern)对"),_("strong",[t._v("类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离")]),t._v("。为了使软件的结构更加清晰，"),_("strong",[t._v("外界对于这些对象只需要知道它们共同的接口")]),t._v("，而不清楚其具体的实现细节，使"),_("strong",[t._v("整个系统的设计更加符合单一职责原则")]),t._v("。")]),t._v(" "),_("p",[t._v("创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式"),_("strong",[t._v("隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起")]),t._v("达到使整个系统独立的目的。")])]),t._v(" "),_("h2",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("模式")]),t._v(" "),_("th",[t._v("name")]),t._v(" "),_("th",[t._v("重要性")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("简单工厂模式")]),t._v(" "),_("td",[t._v("Simple Factory")]),t._v(" "),_("td",[t._v("5")])]),t._v(" "),_("tr",[_("td",[t._v("工厂方法模式")]),t._v(" "),_("td",[t._v("Factory Method")]),t._v(" "),_("td",[t._v("5")])]),t._v(" "),_("tr",[_("td",[t._v("抽象工厂模式")]),t._v(" "),_("td",[t._v("Abstract Factory")]),t._v(" "),_("td",[t._v("5")])]),t._v(" "),_("tr",[_("td",[t._v("单例模式")]),t._v(" "),_("td",[t._v("Singleton")]),t._v(" "),_("td",[t._v("4")])]),t._v(" "),_("tr",[_("td",[t._v("原型模式")]),t._v(" "),_("td",[t._v("Prototype")]),t._v(" "),_("td",[t._v("3")])]),t._v(" "),_("tr",[_("td",[t._v("建造者模式")]),t._v(" "),_("td",[t._v("Builders")]),t._v(" "),_("td",[t._v("2")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);