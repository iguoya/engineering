(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{361:function(t,a,r){"use strict";r.r(a);var n=r(25),s=function(t){t.options.__data__block__={mermaid_382ee1a6:"classDiagram\n\nFactory <|-- FactoryA\nFactory <|-- FactoryB\nProduct <|-- ProductA\nProduct <|-- ProductA\nConcreteFactory --\x3e ConcreteProduct\n\n\nclass ProductA {\n +use() : void \n}\nclass ProductA1 {\n +use() : void \n}\nclass ProductA2 {\n +use() : void \n}\nclass ProductB {\n +eat() : void \n}\nclass ProductB1 {\n +eat() : void \n}\nclass ProductB2 {\n +eat() : void \n}\nclass Factory{\n  +createProductA\t\n}\nclass ConcreteFactory{\n  +factoryMethod() Product\n}\n"}},o=Object(n.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"抽象工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[t._v("#")]),t._v(" 抽象工厂模式")]),t._v(" "),r("h2",{attrs:{id:"动机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[t._v("#")]),t._v(" 动机")]),t._v(" "),r("blockquote",[r("p",[t._v("在工厂方法模式中具体工厂负责生产具体的产品，"),r("strong",[t._v("每一个具体工厂对应一种具体产品")]),t._v("，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。")]),t._v(" "),r("p",[t._v("为了更清晰地理解工厂方法模式，需要先引入两个概念：")]),t._v(" "),r("p",[r("strong",[t._v("产品等级结构")]),t._v(" ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，"),r("strong",[t._v("抽象电视机是父类，而具体品牌的电视机是其子类产品族")]),t._v(" ：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。")]),t._v(" "),r("p",[r("strong",[t._v("当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。")])]),t._v(" "),r("p",[t._v("抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。")]),t._v(" "),r("p",[t._v("抽象工厂模式与工厂方法模式最大的区别在于，"),r("strong",[t._v("工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构")]),t._v("，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。")])]),t._v(" "),r("p",[r("strong",[t._v("==当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。==")])]),t._v(" "),r("h2",{attrs:{id:"定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),r("p",[t._v("抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。")]),t._v(" "),r("h2",{attrs:{id:"对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),r("p",[t._v("略")]),t._v(" "),r("h2",{attrs:{id:"结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[t._v("#")]),t._v(" 结构")]),t._v(" "),r("Mermaid",{attrs:{id:"mermaid_382ee1a6",graph:t.$dataBlock.mermaid_382ee1a6}})],1)}),[],!1,null,null,null);"function"==typeof s&&s(o);a.default=o.exports}}]);