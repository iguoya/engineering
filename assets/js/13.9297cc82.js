(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{368:function(t,a,e){"use strict";e.r(a);var r=e(25),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"适配器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[t._v("#")]),t._v(" 适配器模式")]),t._v(" "),e("h2",{attrs:{id:"动机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[t._v("#")]),t._v(" 动机")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。")]),t._v(" "),e("li",[t._v("通常情况下，客户端可以通过目标类的接口访问它所提供的服务。有时，现有的类可以满足客户类的功能需要，但是它所提供的接口不一定是客户类所期望的，这可能是因为现有类中方法名与目标类中定义的方法名不一致等原因所导致的。")]),t._v(" "),e("li",[t._v("在这种情况下，现有的接口需要转化为客户类期望的接口，这样保证了对现有类的重用。如果不进行这样的转化，客户类就不能利用现有类所提供的功 能，适配器模式可以完成这样的转化。")]),t._v(" "),e("li",[t._v("在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(Adapter)，它所包装的对象就是适配者(Adaptee)，即被适配的类。")]),t._v(" "),e("li",[t._v("适配器提供客户类需要的接口，**适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。**也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。")])])]),t._v(" "),e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("p",[t._v("适配器模式(Adapter Pattern) ：将"),e("strong",[t._v("一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器")]),t._v("(Wrapper)。")]),t._v(" "),e("p",[t._v("适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。")]),t._v(" "),e("p",[t._v("Adapter（适配器）: 包装不兼容接口的对象，这个包装类指的就是适配器")]),t._v(" "),e("p",[t._v("Adaptee（适配者）: 需要包装的对象就是适配者，被适配的类")]),t._v(" "),e("h2",{attrs:{id:"结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[t._v("#")]),t._v(" 结构")]),t._v(" "),e("p",[t._v("Target: 目标抽象类")]),t._v(" "),e("p",[t._v("Adapter：适配器类")]),t._v(" "),e("p",[t._v("Adaptee：适配者类")]),t._v(" "),e("p",[t._v("Client：客户类")])])}),[],!1,null,null,null);a.default=v.exports}}]);