(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{370:function(t,v,_){"use strict";_.r(v);var r=_(25),d=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"结构性模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构性模式"}},[t._v("#")]),t._v(" 结构性模式")]),t._v(" "),_("p",[t._v("结构型模式(Structural Pattern)描述"),_("strong",[t._v("如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。")])]),t._v(" "),_("p",[t._v("结构型模式可以分为"),_("strong",[t._v("类结构型模式和对象结构型模式")]),t._v("：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在"),_("strong",[t._v("类结构型模式中一般只存在继承关系和实现关系")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("对象结构型模式"),_("strong",[t._v("关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。")]),t._v(" 根据“合成复用原则”，"),_("strong",[t._v("在系统中尽量使用关联关系来替代继承关系")]),t._v("，因此大部分结构型模式都是对象结构型模式。")])])]),t._v(" "),_("h2",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("模式")]),t._v(" "),_("th",[t._v("name")]),t._v(" "),_("th",[t._v("重要性")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("外观模式")]),t._v(" "),_("td",[t._v("Facade")]),t._v(" "),_("td",[t._v("5")])]),t._v(" "),_("tr",[_("td",[t._v("适配器模式")]),t._v(" "),_("td",[t._v("Adapter")]),t._v(" "),_("td",[t._v("4")])]),t._v(" "),_("tr",[_("td",[t._v("代理模式")]),t._v(" "),_("td",[t._v("Proxy")]),t._v(" "),_("td",[t._v("4")])]),t._v(" "),_("tr",[_("td",[t._v("组合模式")]),t._v(" "),_("td",[t._v("Composite")]),t._v(" "),_("td",[t._v("4")])]),t._v(" "),_("tr",[_("td",[t._v("桥连模式")]),t._v(" "),_("td",[t._v("Bridge")]),t._v(" "),_("td",[t._v("3")])]),t._v(" "),_("tr",[_("td",[t._v("装饰模式")]),t._v(" "),_("td",[t._v("Decorator")]),t._v(" "),_("td",[t._v("3")])]),t._v(" "),_("tr",[_("td",[t._v("享元模式")]),t._v(" "),_("td",[t._v("FlyWeight")]),t._v(" "),_("td",[t._v("1")])])])])])}),[],!1,null,null,null);v.default=d.exports}}]);